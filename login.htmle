<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DB Web Query Tool 查詢工具</title>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; line-height: 1.6; margin: 0; padding: 2rem; background-color: #f8f9fa; color: #212529; display: flex; justify-content: center; }
        .container { max-width: 1200px; width: 100%; background: #ffffff; padding: 2rem; border-radius: 8px; box-shadow: 0 4px-6px rgba(0, 0, 0, 0.1); }
        h3 { color: #0056b3; border-bottom: 2px solid #dee2e6; padding-bottom: 0.5rem; margin-top: 0; display: flex; justify-content: space-between; align-items: center; }
        .section { margin-bottom: 2rem; padding: 1.5rem; border: 1px solid #e9ecef; border-radius: 6px; }
        .form-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem; }
        .form-group { display: flex; flex-direction: column; }
        .form-row { display: flex; align-items: center; gap: 0.5rem; flex-wrap: wrap; }
        label { margin-bottom: 0.5rem; font-weight: 600; color: #495057; }
        input, select, textarea { width: 100%; padding: 0.5rem; box-sizing: border-box; border: 1px solid #ced4da; border-radius: 4px; font-size: 0.9rem; transition: border-color 0.2s, box-shadow 0.2s; }
        input:focus, select:focus, textarea:focus { border-color: #80bdff; outline: 0; box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }
        textarea { resize: vertical; min-height: 200px; font-family: "Courier New", Courier, monospace; }
        
        button { background-color: #007bff; color: white; padding: 0.5rem 1rem; border: none; border-radius: 4px; cursor: pointer; font-size: 0.9rem; font-weight: 600; transition: background-color 0.2s; white-space: nowrap; }
        button:hover:not(:disabled) { background-color: #0056b3; }
        button:disabled { background-color: #6c757d; cursor: not-allowed; }
        
        .btn-sm { padding: 0.25rem 0.5rem; font-size: 0.8rem; }
        .format-btn { background-color: #6c757d; }
        .format-btn:hover:not(:disabled) { background-color: #5a6268; }
        .format-btn.active { background-color: #007bff; }
        .format-btn.active:hover:not(:disabled) { background-color: #0056b3; }

        .btn-success { background-color: #28a745; } .btn-success:hover:not(:disabled) { background-color: #218838; }
        .btn-danger { background-color: #dc3545; } .btn-danger:hover:not(:disabled) { background-color: #c82333; }
        .btn-info { background-color: #17a2b8; } .btn-info:hover:not(:disabled) { background-color: #138496; }
        .btn-secondary { background-color: #6c757d; } .btn-secondary:hover:not(:disabled) { background-color: #5a6268; }
        
        .result-container {
            margin-top: 1rem;
            min-height: 700px;
        }
        .result-box { margin-top: 1rem; padding: 1rem; border-radius: 4px; font-family: "Courier New", Courier, monospace; word-wrap: break-word; max-height: 500px; overflow: auto; background-color: #e9ecef; border: 1px solid #ced4da; }
        .result-box.rowset-view { white-space: pre; overflow-x: auto; }
        .result-box.success { color: #155724; background-color: #d4edda; border-color: #c3e6cb; }
        .result-box.error { color: #721c24; background-color: #f8d7da; border-color: #f5c6cb; }
        
        table.clean-table { width: 100%; border-collapse: collapse; margin-top: 1rem; }
        table.clean-table th, table.clean-table td { border: 1px solid #dee2e6; padding: 8px; text-align: left; vertical-align: top; }
        table.clean-table thead th { background-color: #f8f9fa; }

        #response-time-display {
            font-weight: bold;
            color: #6c757d;
        }
        #response-time-display.warn {
            color: #fd7e14;
        }
        #response-time-display.error {
            color: #dc3545;
        }
    </style>
</head>
<body>
<div class="container">







  <!-- 頂端右上角的登入/登出區 -->
  <div id="authBar" style="position:fixed;top:10px;right:12px;font:14px/1.4 sans-serif;">
    <img data-oidc-src="avatarDataURL" alt="avatar" width="64" height="64" style="border-radius:50%;display:none">
    <strong data-oidc-text="displayName">-</strong>
    <a id="oidcLoginLink" href="#">Login</a>
  </div> 


  <!-- 將 issuer / clientId 直接用 URL 參數帶入；未帶 callback_uri 則預設回到當前頁 -->
  <script src="http://10.1.230.13:8002/static/oidc.js?client_id=demo-spa&auto_login=0"></script>






    <header class="text-center mb-8">
        <h1 style="text-align: center;" class="text-4xl font-bold text-gray-800">DB Web SQL Tool 查詢工具</h1>
    </header>
    <div class="section">
        <h3>
            <span>1. DB 連線設定</span>
        </h3>
        <div class="form-row" style="justify-content: space-between;">
            <div class="form-grid" style="flex-grow: 1;">
                <div class="form-group"><label for="hostname">IP/Hostname</label><input type="text" id="hostname"></div>
                <div class="form-group"><label for="sid">SID/DB Name</label><input type="text" id="sid"></div>
                <div class="form-group"><label for="user">帳號</label><input type="text" id="user"></div>
                <div class="form-group"><label for="password">密碼</label><input type="password" id="password"></div>
                <div class="form-group">
                    <label for="db-type">DB Type</label>
                    <select id="db-type">
                        <option value="ORA">Oracle</option>
                        <option value="SQL">MS-SQL Server</option>
                        <option value="POST">PostgreSQL</option>
                        <option value="LITE">SQLLite</option>
                    </select>
                </div>
                <div class="form-group"><label for="port">Port</label><input type="number" id="port"></div>
            </div>
        </div>
        <div class="form-row" style="margin-top: 1rem;">
            <button id="test-conn-btn">測試連線</button>
            <div id="conn-result" class="result-box" style="margin-top:0; padding: 0.5rem; display: none; flex-grow: 1;"></div>
                <div style="margin-left: auto;">
                    <select id="profiles-select" style="width: 200px;"><option value="">-- 新增 DB 設定檔 --</option></select>
                    <button id="save-profile-btn" class="btn-sm btn-success">儲存</button>
                    <button id="delete-profile-btn" class="btn-sm btn-danger">刪除</button>
                </div>
        </div>
    </div>
    <div id="sql-section" class="section">
        <h3>
            <span>2. 執行 SQL Statement</span>
            <div class="form-row">
                <span id="session-usage-display" style="margin-right: 1rem; font-size: 0.8rem; color: #6c757d;"></span>
                <span id="storage-usage-display" style="margin-right: 1rem; font-size: 0.8rem; color: #6c757d;"></span>
                <select id="sql-select" style="width: 200px;"><option value="">-- 新增 SQL --</option></select>
                <button id="save-sql-btn" class="btn-sm btn-success">儲存</button>
                <button id="delete-sql-btn" class="btn-sm btn-danger">刪除</button>
            </div>
        </h3>
        <textarea id="sql-statement" placeholder="例如：SELECT * FROM v$version"></textarea>
        <div class="form-row" style="margin-top: 1rem; justify-content: space-between;">
            <div class="form-row">
                <button id="request-query-btn">換頁查詢</button>
                <button id="execute-sql-btn" style="margin-left: 0.5rem;">同頁查詢</button>
                <button id="clear-sql-btn" class="btn-sm btn-secondary" style="margin-left: 0.5rem;">清除</button>
                <label for="max-rows" style="margin-left: 1rem; margin-bottom: 0;">Max Rows:</label>
                <input type="number" id="max-rows" value="200" style="width: 80px;">
                <span id="response-time-display" style="margin-left: 1rem;"></span>
            </div>
            <div id="format-controls">
                <button id="format-rowset" class="format-btn btn-sm">Row Set</button>
                <button id="format-datatables" class="format-btn btn-sm">DataTables</button>
                <button id="format-html" class="format-btn btn-sm">HTML Table</button>
                <button id="format-json" class="format-btn btn-sm">JSON</button>
                <button id="format-csv" class="btn-sm btn-success">Export CSV</button>
            </div>
        </div>
    </div>
    <div id="result-container" class="result-container"></div>
</div>



<script src="https://code.jquery.com/jquery-3.7.0.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script>
   (function() {
    'use strict';

    const STORAGE_KEYS = {
        PROFILES: 'profiles',
        SQLS: 'sqls',
        LAST_PROFILE_ID: 'lastProfileId',
        VIEW_FORMAT_STATE: 'viewFormatState' // <<< 修改點 1
    };
    const ROW_SPAN_COLUMN_COUNT = 3;

    let totalLocalStorage = localStorage.getItem("totalLocalStorageSizeM")
    let totalSessionStorage = sessionStorage.getItem("totalSessionStorageSizeM")

    let profiles = [];
    let sqls = [];
    let currentQueryResult = null;
    let execSqlStatement = '';
    let execCredentials = null;
    
    let activeFormat = 'rowset';
    let viewStates = {
        rowset: { mode: 'normal' },
        isRowSpan: false
    };

    const elements = {
        profileSelect: document.getElementById('profiles-select'),
        saveProfileBtn: document.getElementById('save-profile-btn'),
        deleteProfileBtn: document.getElementById('delete-profile-btn'),
        hostname: document.getElementById('hostname'),
        sid: document.getElementById('sid'),
        user: document.getElementById('user'),
        password: document.getElementById('password'),
        dbType: document.getElementById('db-type'),
        port: document.getElementById('port'),
        testConnBtn: document.getElementById('test-conn-btn'),
        connResult: document.getElementById('conn-result'),
        sqlSelect: document.getElementById('sql-select'),
        sqlStatement: document.getElementById('sql-statement'),
        saveSqlBtn: document.getElementById('save-sql-btn'),
        deleteSqlBtn: document.getElementById('delete-sql-btn'),
        executeSqlBtn: document.getElementById('execute-sql-btn'),
        requestQueryBtn: document.getElementById('request-query-btn'),
        clearSqlBtn: document.getElementById('clear-sql-btn'),
        maxRows: document.getElementById('max-rows'),
        formatControls: document.getElementById('format-controls'),
        resultContainer: document.getElementById('result-container'),
        sqlSection: document.getElementById('sql-section'),
        responseTimeDisplay: document.getElementById('response-time-display'),
        storageUsageDisplay: document.getElementById('storage-usage-display'),
        sessionUsageDisplay: document.getElementById('session-usage-display'),
    };

    const StorageService = {
        get: (key, defaultValue = []) => {
            const item = localStorage.getItem(key);
            if (item === null) return defaultValue;
            try { return JSON.parse(item); } catch (e) { console.error(`Error parsing localStorage item ${key}:`, e); return defaultValue; }
        },
        set: (key, value) => {
            localStorage.setItem(key, JSON.stringify(value));
            //updateLocalStorageUsage();
        }
    };
    
    const apiCall = async (endpoint, method = 'GET', body = null) => {
        const options = { method, headers: { 'Content-Type': 'application/json' } };
        if (body) options.body = JSON.stringify(body);
        try {
            const response = await fetch(endpoint, options);
            if (!response.ok) {
                const errorResult = await response.json().catch(() => ({ detail: 'An unknown server error occurred.' }));
                throw new Error(errorResult.detail || `HTTP error! status: ${response.status}`);
            }
            return await response.json();
        } catch (error) {
            console.error('API call failed:', error);
            throw new Error(error.message || '無法連接至伺服器');
        }
    };
    
    const showConnResult = (message, isError) => {
        elements.connResult.style.display = 'block';
        elements.connResult.textContent = message;
        elements.connResult.className = 'result-box';
        elements.connResult.classList.add(isError ? 'error' : 'success');
    };
    
    const updateActiveFormatButton = () => {
        elements.formatControls.querySelectorAll('.format-btn').forEach(btn => btn.classList.remove('active'));
        const activeBtn = document.getElementById(`format-${activeFormat}`);
        if (activeBtn) activeBtn.classList.add('active');
    };
    
    const setDefaultPort = () => {
        const dbType = elements.dbType.value;
        const defaultPorts = { 'ORA': 1521, 'SQL': 1433, 'POST': 5432, 'LITE': '' };
        elements.port.value = defaultPorts[dbType] || '';
    };

    const getCredentials = () => ({
        hostname: elements.hostname.value.trim(), sid: elements.sid.value.trim(),
        user: elements.user.value.trim(), pwd: elements.password.value,
        db_type: elements.dbType.value, port: parseInt(elements.port.value) || null,
        profileId: elements.profileSelect.value
    });

    // Dean added : 計算 LocalStorage SessionStorage 總量大小 MB
    const getStorageSize = ( storage ) => {
        const dummy100K = "1".repeat(102400);
        let totalSize =0
        for (let i = 0, dummy=dummy100K ; i < 200 ; i++) {
            try {
                storage.setItem("DUMMY", dummy);
                dummy += dummy100K
            } catch(e) {
                totalSize = (JSON.stringify(storage).length/(1024*1024)).toFixed(1);
                storage.removeItem("DUMMY")
                break;
            }
        }
        return totalSize;
    }

    const updateLocalStorageUsage = () => {

        // Dean Added : 計算 LocalStorage and SessionStorage 用量/總量
        let usedLS=(JSON.stringify(localStorage).length/(1024*1024)).toFixed(2);
        let usedSS=(JSON.stringify(sessionStorage).length/(1024*1024)).toFixed(2);

        if (usedSS > totalSessionStorage*0.6) elements.sessionUsageDisplay.style.color='red';
        if (usedLS > totalLocalStorage*0.6) elements.localUsageDisplay.style.color='red';
        elements.sessionUsageDisplay.textContent = ` Session Storage : ${usedSS} / ${totalSessionStorage} MB`;
        elements.storageUsageDisplay.textContent = `   Local Storage : ${usedLS} / ${totalLocalStorage} MB `;

    };
    
    const runQuery = async (queryData) => {
        // Dean added : 捲動到資料 Step 1 到狀態欄
        //elements.sqlSection.scrollIntoView({ behavior: 'auto' });

        elements.resultContainer.innerHTML = '<div class="result-box">查詢中...</div>';
        elements.responseTimeDisplay.textContent = '查詢中...';
        elements.responseTimeDisplay.className = '';
        
        const startTime = performance.now();
        

        try {
            currentQueryResult = await apiCall('/execute-query', 'POST', queryData);
            
            const endTime = performance.now();
            const durationInSeconds = ((endTime - startTime) / 1000).toFixed(2);
            // Dean added : 加回傳row 比數, Elapsed time in seconds 耗時秒數 
            elements.responseTimeDisplay.textContent = `耗時 ${durationInSeconds}s /  回傳 ${currentQueryResult.data.length} rows`; 

            if (durationInSeconds > 2) {
                elements.responseTimeDisplay.className = 'error';
            } else if (durationInSeconds > 1) {
                elements.responseTimeDisplay.className = 'warn';
            }
            
            execSqlStatement = queryData.sql;
            execCredentials = { ...queryData };
            sessionStorage.setItem(window.location.search, JSON.stringify(currentQueryResult));

            // 註解以下三行，因為格式狀態會在 initializeApp 時從 localStorage 載入
            // viewStates.rowset.mode = 'normal';
            // viewStates.isRowSpan = false;
            // activeFormat = 'rowset';
            renderResult();

            // Dean added : 捲動到資料 Step 2 到資料欄位, 顯示格式按鈕
            elements.requestQueryBtn.scrollIntoView({ behavior: 'smooth' });
            //elements.sqlSection.scrollIntoView({ behavior: 'smooth' });

            // Dean added : 計算顯示 Local Storage 用量
            updateLocalStorageUsage();

        } catch (error) {
            let extraMessage='';
            if (error.name === 'QuotaExceededError' ) {
                sessionStorage.removeItem(window.location.search);
                extraMessage="<br><br> ------ Sesssion Storage 會話儲存已滿, 請另外開 分頁查詢 ------";
                //sessionStorage.clear();
            }
            
            //elements.resultContainer.innerHTML = `<div class="result-box error">查詢失敗:${error.name} / ${error.message} </div>`;
            elements.resultContainer.innerHTML = `<div class="result-box error">查詢失敗:${error.name} / ${error.message} ${extraMessage}</div>`;

            elements.responseTimeDisplay.textContent = '查詢失敗';
            elements.responseTimeDisplay.className = 'error';
            currentQueryResult = null;
            
        }
    };

    const loadProfiles = () => {
        profiles = StorageService.get(STORAGE_KEYS.PROFILES);
        profiles.sort((a, b) => a.name.localeCompare(b.name, 'zh-Hant'));
        
        const selectedValue = elements.profileSelect.value;
        elements.profileSelect.innerHTML = '<option value="">-- 新增 DB 設定檔 --</option>';
        profiles.forEach(p => elements.profileSelect.add(new Option(p.name, p.id)));

        const lastProfileId = localStorage.getItem(STORAGE_KEYS.LAST_PROFILE_ID);
        if (lastProfileId && elements.profileSelect.querySelector(`option[value="${lastProfileId}"]`)) {
            elements.profileSelect.value = lastProfileId;
        } else if (selectedValue && elements.profileSelect.querySelector(`option[value="${selectedValue}"]`)) {
            elements.profileSelect.value = selectedValue;
        }
        handleProfileChange();
    };

    const handleProfileChange = () => {
        const selectedId = elements.profileSelect.value;
        localStorage.setItem(STORAGE_KEYS.LAST_PROFILE_ID, selectedId);

        if (selectedId) {
            const profile = profiles.find(p => p.id == selectedId);
            if (profile) {
                elements.hostname.value = profile.hostname || '';
                elements.sid.value = profile.sid || '';
                elements.user.value = profile.user || '';
                elements.password.value = profile.password || '';
                elements.dbType.value = profile.db_type || 'ORA';
                elements.port.value = profile.port ? profile.port : (setDefaultPort(), elements.port.value);
            }
            loadSqls(selectedId);
        } else {
            ['hostname', 'sid', 'user', 'password'].forEach(id => elements[id].value = '');
            elements.dbType.value = 'ORA';
            setDefaultPort();
            loadSqls(null);
        }
    };

    const loadSqls = (profileId) => {
        sqls = StorageService.get(STORAGE_KEYS.SQLS);
        elements.sqlSelect.innerHTML = '<option value="">-- 新增 SQL --</option>';
        if (profileId) {
            const profileSqls = sqls.filter(s => s.profile_id == profileId);
            profileSqls.sort((a, b) => a.name.localeCompare(b.name, 'zh-Hant'));
            profileSqls.forEach(s => elements.sqlSelect.add(new Option(s.name, s.id)));
        }
        elements.sqlSelect.dispatchEvent(new Event('change'));
    };
    
    const getProcessedData = () => {
        if (!currentQueryResult) return { columns: [], data: [] };
        const { columns: originalColumns, data: originalData } = currentQueryResult;
        const mode = viewStates.rowset.mode;
        if (mode === 'normal') {
            return { columns: originalColumns, data: originalData };
        }
        const dataWithId = originalData.map((row, index) => ({ ID: index + 1, ...row }));
        const columnsWithId = ['ID', ...originalColumns];
        return { columns: columnsWithId, data: dataWithId };
    };

    const renderResult = () => {
        if (!currentQueryResult) return;
        switch(activeFormat) {
            case 'rowset': renderRowSet(); break;
            case 'datatables': renderDataTables(); break;
            case 'html': renderHtmlTable(); break;
            case 'json': renderJson(); break;
        }
        updateActiveFormatButton();
    };
    
    const getTransposedData = (columns, data) => { 
        if (!columns || columns.length === 0 || !data || data.length === 0) {
            return { headers: [], bodyData: [] };
        }
        const firstColumnName = columns[0];
        const newHeaders = [firstColumnName, ...data.map(row => row[firstColumnName] ?? '')];
        const newBodyData = columns.slice(1).map(colName => {
            return [colName, ...data.map(originalRow => originalRow[colName] ?? '')];
        });
        return { headers: newHeaders, bodyData: newBodyData };
    };

    const renderRowSet = () => { 
        const { columns, data } = getProcessedData(); 
        const isTransposed = viewStates.rowset.mode === 'transposed';
        let text = `查詢成功，共回傳 ${currentQueryResult.data.length} 筆資料。\n\n`; 
        const colWidths = columns.map(c => String(c).length);
        data.forEach(row => columns.forEach((col, i) => { 
            const val = String(row[col] ?? ''); 
            if (val.length > colWidths[i]) colWidths[i] = val.length; 
        }));
        if (isTransposed) { 
            columns.forEach((col, i) => { text += String(col).padEnd(colWidths[i]) + ' | ' + data.map(row => String(row[col] ?? '').padEnd(colWidths[i])).join(' | ') + '\n'; }); 
        } else { 
            text += columns.map((c, i) => String(c).padEnd(colWidths[i])).join(' | ') + '\n'; 
            text += columns.map((c, i) => '-'.repeat(colWidths[i])).join('-|-') + '\n'; 
            data.forEach(row => { text += columns.map((c, i) => String(row[c] ?? '').padEnd(colWidths[i])).join(' | ') + '\n'; }); 
        } 
        elements.resultContainer.innerHTML = `<pre class="result-box rowset-view">${text}</pre>`; 
    };

    const renderDataTables = () => { 
        let { columns, data } = getProcessedData(); 
        let headers, tableData; 
        if (viewStates.rowset.mode === 'transposed') { 
            const transposed = getTransposedData(columns, data); 
            headers = transposed.headers; 
            tableData = transposed.bodyData;
            // Dean added: 手動修改datatalbe 按鈕在transpose 模式下無法顯示藍色的問題
            updateActiveFormatButton();
        } else { 
            headers = columns; 
            tableData = data.map(row => columns.map(col => row[col])); 
        } 
        const tableId = `dt-${Date.now()}`; 
        elements.resultContainer.innerHTML = `<table id="${tableId}" class="display compact" style="width:100%"></table>`; 
        $(`#${tableId}`).DataTable({ 
            data: tableData, 
            columns: headers.map(h => ({ title: h })),
            destroy: true, 
            lengthMenu: [50, 10, 25, 100, 200 ], 
            scrollX: true, 
            order: []
        }); 
    };

    const renderHtmlTable = () => { 
        let { columns, data } = getProcessedData(); 
        let tableHtml;
        if (viewStates.rowset.mode === 'transposed') { 
            const transposed = getTransposedData(columns, data); 
            const headers = transposed.headers; 
            const bodyData = transposed.bodyData;
            tableHtml = '<table class="clean-table"><thead><tr>' + headers.map(h => `<th>${h}</th>`).join('') + '</tr></thead><tbody>'; 
            bodyData.forEach(rowDataArray => {
                tableHtml += '<tr>' + rowDataArray.map(cellData => `<td>${cellData ?? ''}</td>`).join('') + '</tr>';
            });
            tableHtml += '</tbody></table>';
        } else { 
            const headers = columns; 
            const bodyRows = data;
            tableHtml = '<table class="clean-table"><thead><tr>' + headers.map(h => `<th>${h}</th>`).join('') + '</tr></thead><tbody>'; 
            if (viewStates.isRowSpan && bodyRows.length > 0) { 
                let lastValues = new Array(ROW_SPAN_COLUMN_COUNT).fill(null); 
                for (let i = 0; i < bodyRows.length; i++) { 
                    tableHtml += '<tr>'; 
                    for (let j = 0; j < headers.length; j++) { 
                        const col = headers[j]; 
                        const isSpanCol = j < ROW_SPAN_COLUMN_COUNT; 
                        if (isSpanCol && i > 0 && bodyRows[i][col] === lastValues[j]) {} 
                        else { 
                            lastValues[j] = bodyRows[i][col]; 
                            let span = 1; 
                            if (isSpanCol) { 
                                for (let k = i + 1; k < bodyRows.length; k++) { 
                                    if (bodyRows[k][col] === bodyRows[i][col]) span++; 
                                    else break; 
                                } 
                            } 
                            tableHtml += `<td ${span > 1 ? `rowspan="${span}"` : ''}>${bodyRows[i][col] ?? ''}</td>`; 
                        } 
                    } 
                    tableHtml += '</tr>'; 
                } 
            } else { 
                bodyRows.forEach(row => { 
                    tableHtml += '<tr>' + headers.map(col => `<td>${row[col] ?? ''}</td>`).join('') + '</tr>'; 
                }); 
            } 
            tableHtml += '</tbody></table>';
        }
        elements.resultContainer.innerHTML = tableHtml; 
    };
    
    const renderJson = () => { 
        elements.resultContainer.innerHTML = `<pre class="result-box">${JSON.stringify(currentQueryResult.data, null, 2)}</pre>`; 
    };
    
    const exportCsv = () => { 
        const { columns, data } = getProcessedData(); 
        let headers, csvContent; 
        if (viewStates.rowset.mode === 'transposed') { 
            const transposed = getTransposedData(columns, data); 
            headers = transposed.headers; 
            const bodyData = transposed.bodyData;
            csvContent = headers.map(h => `"${String(h ?? '').replace(/"/g, '""')}"`).join(",") + "\r\n";
            bodyData.forEach(rowDataArray => {
                csvContent += rowDataArray.map(cellData => `"${String(cellData ?? '').replace(/"/g, '""')}"`).join(",") + "\r\n";
            });
        } else { 
            headers = columns; 
            const rows = data;
            csvContent = headers.map(h => `"${String(h ?? '').replace(/"/g, '""')}"`).join(",") + "\r\n"; 
            rows.forEach(row => { 
                csvContent += headers.map(header => `"${String(row[header] ?? '').replace(/"/g, '""')}"`).join(",") + "\r\n"; 
            }); 
        } 
        
        const link = document.createElement("a"); 
        link.setAttribute("href", 'data:text/csv;charset=utf-8,' + encodeURI(csvContent)); 
        link.setAttribute("download", "query_result.csv"); 
        document.body.appendChild(link); 
        link.click(); 
        document.body.removeChild(link); 
    };

    function setupEventListeners() {
        elements.sqlSelect.addEventListener('change', () => {
            const sqlId = elements.sqlSelect.value;
            const sql = sqls.find(s => s.id == sqlId);
            elements.sqlStatement.value = sql ? sql.statement : '';

            // Dean added: 選完sql後, 跳到 SQL 輸入格, 可直接按Tab, Space 鍵盤空白鍵查詢
            // elements.requestQueryBtn.focus();
            elements.sqlStatement.focus();
        });
        elements.profileSelect.addEventListener('change', handleProfileChange);
        elements.dbType.addEventListener('change', setDefaultPort);
        elements.testConnBtn.addEventListener('click', async () => {
            try {
                const result = await apiCall('/test-connection', 'POST', getCredentials());
                showConnResult(result.message, false);
            } catch (error) {
                showConnResult(error.message, true);
            }
        });
        elements.saveProfileBtn.addEventListener('click', () => {
            profiles = StorageService.get(STORAGE_KEYS.PROFILES);
            const promptTitle = "請輸入設定檔名稱：\n- 輸入既有名稱可更新\n- 輸入新名稱則建立";
            const currentName = elements.profileSelect.value ? profiles.find(p=>p.id === elements.profileSelect.value).name : "";
            const targetName = prompt(promptTitle, currentName);
            if (!targetName) return;

            const profileData = {
                name: targetName, hostname: elements.hostname.value.trim(), sid: elements.sid.value.trim(),
                user: elements.user.value.trim(), password: elements.password.value,
                db_type: elements.dbType.value, port: parseInt(elements.port.value) || null
            };
            
            const existingProfile = profiles.find(p => p.name === targetName);
            if (existingProfile) {
                const profileIndex = profiles.findIndex(p => p.id == existingProfile.id);
                profiles[profileIndex] = { ...existingProfile, ...profileData };
                StorageService.set(STORAGE_KEYS.PROFILES, profiles);
                localStorage.setItem(STORAGE_KEYS.LAST_PROFILE_ID, existingProfile.id);
                loadProfiles();
            } else {
                const newProfile = { ...profileData, id: Date.now().toString() };
                profiles.push(newProfile);
                StorageService.set(STORAGE_KEYS.PROFILES, profiles);
                localStorage.setItem(STORAGE_KEYS.LAST_PROFILE_ID, newProfile.id);
                loadProfiles();
            }
        });
        elements.deleteProfileBtn.addEventListener('click', () => {
            const selectedId = elements.profileSelect.value;
            if (!selectedId) return;
            const profileToDelete = StorageService.get(STORAGE_KEYS.PROFILES).find(p => p.id == selectedId);
            if (!profileToDelete) return;
            if (confirm(`確定要刪除設定檔 '${profileToDelete.name}' 嗎？`)) {
                profiles = StorageService.get(STORAGE_KEYS.PROFILES).filter(p => p.id != selectedId);
                StorageService.set(STORAGE_KEYS.PROFILES, profiles);
                sqls = StorageService.get(STORAGE_KEYS.SQLS).filter(s => s.profile_id != selectedId);
                StorageService.set(STORAGE_KEYS.SQLS, sqls);
                loadProfiles();
            }
        });
        elements.saveSqlBtn.addEventListener('click', () => {
            const profileId = elements.profileSelect.value;
            if (!profileId) return alert('請先選擇一個資料庫設定檔');
            sqls = StorageService.get(STORAGE_KEYS.SQLS);
            const currentSql = elements.sqlSelect.value ? sqls.find(s => s.id == elements.sqlSelect.value) : null;
            const promptTitle = "請輸入 SQL 名稱：\n- 輸入既有名稱可更新\n- 輸入新名稱則建立";
            const targetName = prompt(promptTitle, currentSql ? currentSql.name : "");
            if (!targetName) return;
            const sqlData = { name: targetName, statement: elements.sqlStatement.value.trim() };
            
            const existingSql = sqls.find(s => s.profile_id == profileId && s.name === targetName);
            if (existingSql) {
                const sqlIndex = sqls.findIndex(s => s.id == existingSql.id);
                sqls[sqlIndex] = { ...existingSql, ...sqlData };
                StorageService.set(STORAGE_KEYS.SQLS, sqls);
                loadSqls(profileId);
                elements.sqlSelect.value = existingSql.id;
            } else {
                const newSql = { ...sqlData, id: Date.now().toString(), profile_id: profileId };
                sqls.push(newSql);
                StorageService.set(STORAGE_KEYS.SQLS, sqls);
                loadSqls(profileId);
                elements.sqlSelect.value = newSql.id;
            }
        });
        elements.deleteSqlBtn.addEventListener('click', () => {
            const sqlId = elements.sqlSelect.value;
            if (!sqlId) return;
            const sqlToDelete = StorageService.get(STORAGE_KEYS.SQLS).find(s => s.id == sqlId);
            if (!sqlToDelete) return;
            if (confirm(`確定要刪除 SQL '${sqlToDelete.name}' 嗎？`)) {
                sqls = StorageService.get(STORAGE_KEYS.SQLS).filter(s => s.id != sqlId);
                StorageService.set(STORAGE_KEYS.SQLS, sqls);
                loadSqls(elements.profileSelect.value);
            }
        });
        elements.executeSqlBtn.addEventListener('click', () => {
            const queryData = {
                ...getCredentials(),
                sql: elements.sqlStatement.value.trim(),
                max_rows: parseInt(elements.maxRows.value) || 200
            };
            runQuery(queryData);
        });
        elements.requestQueryBtn.addEventListener('click', () => {
            const sqlForRequest = elements.sqlStatement.value.trim();
            if (!sqlForRequest) return alert('請輸入 SQL 語句');
            const queryData = {
                ...getCredentials(),
                sql: sqlForRequest,
                max_rows: parseInt(elements.maxRows.value) || 200
            };
            const queryId = `query_${Date.now()}`;
            sessionStorage.setItem(queryId, JSON.stringify(queryData));
            if (execCredentials) {
                elements.sqlStatement.value = execCredentials.sql;
                elements.profileSelect.value = execCredentials.profileId;
                elements.hostname.value = execCredentials.hostname;
                elements.sid.value = execCredentials.sid;
                elements.user.value = execCredentials.user;
                elements.password.value = execCredentials.pwd;
                elements.dbType.value = execCredentials.db_type;
                elements.port.value = execCredentials.port;
            }
            window.location.href = `${window.location.pathname}?queryId=${queryId}`;
        });
        elements.clearSqlBtn.addEventListener('click', () => {
            if (elements.sqlStatement.value !== '') {
                elements.sqlStatement.value = '';
            } else {
                elements.sqlStatement.value = execSqlStatement;
            }
        });
        elements.formatControls.addEventListener('click', (e) => {
            if (!e.target.matches('button') || !currentQueryResult) return;
            const targetId = e.target.id;
            const newFormat = targetId.replace('format-', '');

            if (newFormat === 'csv') {
                exportCsv();
                return;
            }
            
            if (activeFormat === newFormat) {
                if (newFormat === 'rowset') {
                    const modes = ['normal', 'withId', 'transposed'];
                    const currentModeIndex = modes.indexOf(viewStates.rowset.mode);
                    viewStates.rowset.mode = modes[(currentModeIndex + 1) % modes.length];
                } else if (newFormat === 'html') {
                    viewStates.isRowSpan = !viewStates.isRowSpan;
                }
            }
            
            activeFormat = newFormat;
            renderResult();

            // <<< 修改點 2 >>>
            StorageService.set(STORAGE_KEYS.VIEW_FORMAT_STATE, {
                activeFormat: activeFormat,
                viewStates: viewStates
            });
        });
    }

    // --- 8. 初始化 (Initialization) ---
    const urlParams = new URLSearchParams(window.location.search);
    const queryId = urlParams.get('queryId');
    const isResultPage = !!queryId;

    function initializeApp() {

    const navigationEntries = window.performance.getEntriesByType("navigation");
        if (navigationEntries[0].type === "back_forward") {
            // alert("這是透過歷史紀錄回退的,想要避免Reload Query");
            // return;
        } else if (navigationEntries.length > 0 && navigationEntries[0].type === "reload") {
            //alert("這是重新載入的");
        } else {
            //alert("這是第一次導航或其他類型");
        }
        // <<< 修改點 3 (Part 1) >>>
        const savedFormatState = StorageService.get(STORAGE_KEYS.VIEW_FORMAT_STATE, null);
        if (savedFormatState) {
            activeFormat = savedFormatState.activeFormat || 'rowset';
            Object.assign(viewStates, savedFormatState.viewStates);
        }

        // Dean Added : 計算 LocalStorage SessionSrorage Size
        if ( !totalLocalStorage ) {
            totalLocalStorage=getStorageSize( localStorage )
            // alert(`Local Storage 本地儲存大小 : ${totalLocalStorage} MB`);
            localStorage.setItem("totalLocalStorageSizeM", totalLocalStorage)
        }
        if ( !totalSessionStorage ) {
            totalSessionStorage=getStorageSize( sessionStorage )
            // alert(`Session Storage 會話儲存大小 : ${totalSessionStorage} MB`);
            sessionStorage.setItem("totalSessionStorageSizeM", totalSessionStorage)
        }


        const queryDataJSON = sessionStorage.getItem(queryId);
        if (isResultPage && queryDataJSON ) {
            document.title = "查詢結果";
            
            if (!queryDataJSON) {
                elements.resultContainer.innerHTML = `<div class="result-box error">找不到查詢參數 (ID: ${queryId})，可能是分頁已過期。</div>`;
                return;
            }
            const queryData = JSON.parse(queryDataJSON);
            
            Object.keys(queryData).forEach(key => {
                if (elements[key] && key !== 'sql') {
                    elements[key].value = queryData[key];
                }
            });
            elements.password.value = queryData.pwd;
            elements.sqlStatement.value = queryData.sql;

// ----> 想要 1:不使用Session Storage, 2:回前頁也不會重新Query, 但是似乎還沒找到方法.
// execSqlStatement = queryData.sql;
// runQuery(queryData)

            const cachedResultKey = window.location.search;
            const cachedResultJSON = sessionStorage.getItem(cachedResultKey);
            if (cachedResultJSON) {
                currentQueryResult = JSON.parse(cachedResultJSON);
                execSqlStatement = queryData.sql;
                execCredentials = { ...queryData };
                elements.responseTimeDisplay.textContent = "(來自快取)";
                renderResult();
            } else {
                runQuery(queryData);
            }
            
            profiles = StorageService.get(STORAGE_KEYS.PROFILES);
            elements.profileSelect.innerHTML = '<option value="">-- 新增 DB 設定檔 --</option>';
            profiles.sort((a, b) => a.name.localeCompare(b.name, 'zh-Hant')).forEach(p => elements.profileSelect.add(new Option(p.name, p.id)));
            
            const profileId = queryData.profileId;
            if (profileId) {
                elements.profileSelect.value = profileId;
                loadSqls(profileId, false);
            }
        } else {
            loadProfiles();
        }
        setupEventListeners();
        updateLocalStorageUsage();
        updateActiveFormatButton(); // <<< 修改點 3 (Part 2) >>>
    }

    initializeApp();

})();
</script>
</body>
</html>

